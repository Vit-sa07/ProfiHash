def primer_hash(data):
    # Инициализируем начальное значение хэша как 0
    hash_val = 0

    # Проходим по каждому символу входных данных
    for char in data:
        # Обновляем хэш-значение с использованием полиномиального хэширования
        # ord(char) получает числовое представление символа
        # умножаем текущее хэш-значение на 31 и прибавляем значение символа
        # берем остаток от деления на большое простое число 1000000007 для предотвращения переполнения
        hash_val = (hash_val * 31 + ord(char)) % 1000000007

    # Возвращаем вычисленное хэш-значение
    return hash_val


def hash_file(file_path):
    # Инициализируем начальное значение хэша как 0
    hash_val = 0

    # Открываем файл в бинарном режиме (для чтения побайтово)
    with open(file_path, 'rb') as file:
        # Читаем файл порциями по 8192 байт
        buffer = file.read(8192)
        while buffer:
            # Для каждой порции данных обновляем хэш-значение
            # Декодируем байтовый буфер в строку с помощью 'latin1' для правильного отображения символов
            # Вызываем simple_hash для получения хэш-значения текущего буфера
            # Обновляем общее хэш-значение с учетом новой порции данных
            hash_val = (hash_val * 31 + primer_hash(buffer.decode('latin1'))) % 1000000007

            # Читаем следующую порцию данных
            buffer = file.read(8192)

    # Возвращаем итоговое хэш-значение в шестнадцатеричном формате
    return format(hash_val, 'x')


def save_hash_to_file(hash_val, output_path):
    # Открываем файл для записи
    with open(output_path, 'w') as file:
        # Записываем хэш-значение в файл
        file.write(hash_val)


if __name__ == "__main__":
    # Определяем путь к входному файлу для хэширования
    input_file = "input.txt"
    # Определяем путь к выходному файлу для сохранения хэш-значения
    output_file = "primer_output_hash.txt"

    # Выполняем хэширование входного файла и получаем хэш-значение
    hash_val = hash_file(input_file)
    # Сохраняем полученное хэш-значение в выходной файл
    save_hash_to_file(hash_val, output_file)

    # Выводим сообщение о том, что хэш-значение сохранено
    print(f"Хэш сохранён в файл {output_file}: {hash_val}")
